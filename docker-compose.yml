services:
  # POSTGRES
  db:
    container_name: web_prog_2_db_postgres
    restart: always
    image: postgres:17
    env_file:
      - .env
    ports:
      - ${POSTGRES_PORT}:5432 
    networks:
      - web_prog_net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      retries: 5
      timeout: 3s
  # MONGODB
  mongo:
    container_name: web_prog_2_db_mongo
    image: mongo:6
    restart: always
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - ${MONGO_PORT}:27017
    volumes:
      - mongodb_data:/data/db
      - ./server/db/mongo_migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - web_prog_net
    healthcheck:
      test: ["CMD", "mongosh", "--username", "${MONGO_INITDB_ROOT_USERNAME}", "--password", "${MONGO_INITDB_ROOT_PASSWORD}", "--authenticationDatabase", "admin", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      timeout: 5s
  # MONGODB MIGRATION 
  migrate-mongo:
    build:
      context: ./server/db
    container_name: web_prog_2_db_migrate_mongo
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      MONGO_URI: "mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/${MONGO_INITDB_DATABASE}?authSource=admin"
    volumes:
      - ./server/db/mongo_migrations:/migrations
    networks:
      - web_prog_net
  # POSTGRES MIGRATION
  flyway:
    image: flyway/flyway
    container_name: web_prog_2_db_flyway_migrations
    command: -url=jdbc:postgresql://db:5432/${POSTGRES_DB} -user=${POSTGRES_USER} -password=${POSTGRES_PASSWORD} migrate
    volumes:
      - ./server/db/flyway.conf:/flyway/conf/flyway.conf
      - ./server/db/migrations:/flyway/sql
    depends_on:
      db:
        condition: service_healthy
    networks:
      - web_prog_net

  # server:
  #   container_name: web_prog_2_server
  #   restart: always
  #   build:
  #     context: .
  #   env_file:
  #     - .env
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   ports:
  #     - ${SERVER_PORT}:${SERVER_PORT}
  #   networks:
  #     - web_prog_net

networks:
  web_prog_net:
    driver: bridge
    
volumes:
  mongodb_data: